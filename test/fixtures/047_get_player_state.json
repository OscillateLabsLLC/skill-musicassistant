{
  "player_id": "a8d4933d-eae2-9288-f42b-771f13c66ee9",
  "raw_player": {
    "player_id": "a8d4933d-eae2-9288-f42b-771f13c66ee9",
    "provider": "chromecast--bAbELZ34",
    "type": {
      "_value_": "player",
      "_name_": "PLAYER",
      "__objclass__": {
        "_generate_next_value_": {
          "__module__": "enum",
          "__name__": "_generate_next_value_",
          "__qualname__": "StrEnum._generate_next_value_",
          "__doc__": "\n        Return the lower-cased version of the member name.\n        ",
          "__annotations__": {}
        },
        "__module__": "music_assistant_models.enums",
        "__doc__": "Enum with possible Player Types.\n\n    player: A regular player.\n    stereo_pair: Same as player but a dedicated stereo pair of 2 speakers.\n    group: A (dedicated) (sync)group player or (universal) playergroup.\n    ",
        "_missing_": {
          "__module__": "music_assistant_models.enums",
          "__name__": "_missing_",
          "__qualname__": "PlayerType._missing_",
          "__doc__": "Set default enum member if an unknown value is provided.",
          "__annotations__": {
            "value": "object",
            "return": "PlayerType"
          }
        },
        "_new_member_": {},
        "_use_args_": true,
        "_member_names_": [
          "PLAYER",
          "STEREO_PAIR",
          "GROUP",
          "UNKNOWN"
        ],
        "_member_map_": {
          "PLAYER": "<circular_ref:PlayerType>",
          "STEREO_PAIR": {
            "_value_": "stereo_pair",
            "_name_": "STEREO_PAIR",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 1
          },
          "GROUP": {
            "_value_": "group",
            "_name_": "GROUP",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 2
          },
          "UNKNOWN": {
            "_value_": "unknown",
            "_name_": "UNKNOWN",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 3
          }
        },
        "_value2member_map_": {
          "player": "<circular_ref:PlayerType>",
          "stereo_pair": {
            "_value_": "stereo_pair",
            "_name_": "STEREO_PAIR",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 1
          },
          "group": {
            "_value_": "group",
            "_name_": "GROUP",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 2
          },
          "unknown": {
            "_value_": "unknown",
            "_name_": "UNKNOWN",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 3
          }
        },
        "_unhashable_values_": [],
        "_member_type_": {
          "__new__": "<built-in method __new__ of type object at 0x105abc1e0>",
          "__repr__": "<slot wrapper '__repr__' of 'str' objects>",
          "__hash__": "<slot wrapper '__hash__' of 'str' objects>",
          "__str__": "<slot wrapper '__str__' of 'str' objects>",
          "__lt__": "<slot wrapper '__lt__' of 'str' objects>",
          "__le__": "<slot wrapper '__le__' of 'str' objects>",
          "__eq__": "<slot wrapper '__eq__' of 'str' objects>",
          "__ne__": "<slot wrapper '__ne__' of 'str' objects>",
          "__gt__": "<slot wrapper '__gt__' of 'str' objects>",
          "__ge__": "<slot wrapper '__ge__' of 'str' objects>",
          "__iter__": "<slot wrapper '__iter__' of 'str' objects>",
          "__mod__": "<slot wrapper '__mod__' of 'str' objects>",
          "__rmod__": "<slot wrapper '__rmod__' of 'str' objects>",
          "__len__": "<slot wrapper '__len__' of 'str' objects>",
          "__getitem__": "<slot wrapper '__getitem__' of 'str' objects>",
          "__add__": "<slot wrapper '__add__' of 'str' objects>",
          "__mul__": "<slot wrapper '__mul__' of 'str' objects>",
          "__rmul__": "<slot wrapper '__rmul__' of 'str' objects>",
          "__contains__": "<slot wrapper '__contains__' of 'str' objects>",
          "encode": "<method 'encode' of 'str' objects>",
          "replace": "<method 'replace' of 'str' objects>",
          "split": "<method 'split' of 'str' objects>",
          "rsplit": "<method 'rsplit' of 'str' objects>",
          "join": "<method 'join' of 'str' objects>",
          "capitalize": "<method 'capitalize' of 'str' objects>",
          "casefold": "<method 'casefold' of 'str' objects>",
          "title": "<method 'title' of 'str' objects>",
          "center": "<method 'center' of 'str' objects>",
          "count": "<method 'count' of 'str' objects>",
          "expandtabs": "<method 'expandtabs' of 'str' objects>",
          "find": "<method 'find' of 'str' objects>",
          "partition": "<method 'partition' of 'str' objects>",
          "index": "<method 'index' of 'str' objects>",
          "ljust": "<method 'ljust' of 'str' objects>",
          "lower": "<method 'lower' of 'str' objects>",
          "lstrip": "<method 'lstrip' of 'str' objects>",
          "rfind": "<method 'rfind' of 'str' objects>",
          "rindex": "<method 'rindex' of 'str' objects>",
          "rjust": "<method 'rjust' of 'str' objects>",
          "rstrip": "<method 'rstrip' of 'str' objects>",
          "rpartition": "<method 'rpartition' of 'str' objects>",
          "splitlines": "<method 'splitlines' of 'str' objects>",
          "strip": "<method 'strip' of 'str' objects>",
          "swapcase": "<method 'swapcase' of 'str' objects>",
          "translate": "<method 'translate' of 'str' objects>",
          "upper": "<method 'upper' of 'str' objects>",
          "startswith": "<method 'startswith' of 'str' objects>",
          "endswith": "<method 'endswith' of 'str' objects>",
          "removeprefix": "<method 'removeprefix' of 'str' objects>",
          "removesuffix": "<method 'removesuffix' of 'str' objects>",
          "isascii": "<method 'isascii' of 'str' objects>",
          "islower": "<method 'islower' of 'str' objects>",
          "isupper": "<method 'isupper' of 'str' objects>",
          "istitle": "<method 'istitle' of 'str' objects>",
          "isspace": "<method 'isspace' of 'str' objects>",
          "isdecimal": "<method 'isdecimal' of 'str' objects>",
          "isdigit": "<method 'isdigit' of 'str' objects>",
          "isnumeric": "<method 'isnumeric' of 'str' objects>",
          "isalpha": "<method 'isalpha' of 'str' objects>",
          "isalnum": "<method 'isalnum' of 'str' objects>",
          "isidentifier": "<method 'isidentifier' of 'str' objects>",
          "isprintable": "<method 'isprintable' of 'str' objects>",
          "zfill": "<method 'zfill' of 'str' objects>",
          "format": "<method 'format' of 'str' objects>",
          "format_map": "<method 'format_map' of 'str' objects>",
          "__format__": "<method '__format__' of 'str' objects>",
          "maketrans": {},
          "__sizeof__": "<method '__sizeof__' of 'str' objects>",
          "__getnewargs__": "<method '__getnewargs__' of 'str' objects>",
          "__doc__": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        },
        "_value_repr_": "<slot wrapper '__repr__' of 'str' objects>",
        "PLAYER": "<circular_ref:PlayerType>",
        "STEREO_PAIR": {
          "_value_": "stereo_pair",
          "_name_": "STEREO_PAIR",
          "__objclass__": "<circular_ref:EnumType>",
          "_sort_order_": 1
        },
        "GROUP": {
          "_value_": "group",
          "_name_": "GROUP",
          "__objclass__": "<circular_ref:EnumType>",
          "_sort_order_": 2
        },
        "UNKNOWN": {
          "_value_": "unknown",
          "_name_": "UNKNOWN",
          "__objclass__": "<circular_ref:EnumType>",
          "_sort_order_": 3
        },
        "__str__": "<slot wrapper '__str__' of 'str' objects>",
        "__format__": "<method '__format__' of 'str' objects>",
        "__new__": {}
      },
      "_sort_order_": 0
    },
    "name": "Office Speaker",
    "available": true,
    "device_info": {
      "model": "Google Nest Mini",
      "manufacturer": "Google Inc.",
      "software_version": null,
      "model_id": null,
      "manufacturer_id": null,
      "ip_address": "192.168.1.101:8009",
      "mac_address": null
    },
    "supported_features": "{<PlayerFeature.NEXT_PREVIOUS: 'next_previous'>, <PlayerFeature.VOLUME_MUTE: 'volume_mute'>, <PlayerFeature.ENQUEUE: 'enqueue'>, <PlayerFeature.POWER: 'power'>, <PlayerFeature.VOLUME_SET: 'volume_set'>, <PlayerFeature.PAUSE: 'pause'>}",
    "playback_state": {
      "_value_": "playing",
      "_name_": "PLAYING",
      "__objclass__": {
        "_generate_next_value_": {
          "__module__": "enum",
          "__name__": "_generate_next_value_",
          "__qualname__": "StrEnum._generate_next_value_",
          "__doc__": "\n        Return the lower-cased version of the member name.\n        ",
          "__annotations__": {}
        },
        "__module__": "music_assistant_models.enums",
        "__doc__": "Enum for the (playback)state of a player.",
        "_missing_": {
          "__module__": "music_assistant_models.enums",
          "__name__": "_missing_",
          "__qualname__": "PlaybackState._missing_",
          "__doc__": "Set default enum member if an unknown value is provided.",
          "__annotations__": {
            "value": "object",
            "return": "PlaybackState"
          }
        },
        "_new_member_": {},
        "_use_args_": true,
        "_member_names_": [
          "IDLE",
          "PAUSED",
          "PLAYING",
          "UNKNOWN"
        ],
        "_member_map_": {
          "IDLE": {
            "_value_": "idle",
            "_name_": "IDLE",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 0
          },
          "PAUSED": {
            "_value_": "paused",
            "_name_": "PAUSED",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 1
          },
          "PLAYING": "<circular_ref:PlaybackState>",
          "UNKNOWN": {
            "_value_": "unknown",
            "_name_": "UNKNOWN",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 3
          }
        },
        "_value2member_map_": {
          "idle": {
            "_value_": "idle",
            "_name_": "IDLE",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 0
          },
          "paused": {
            "_value_": "paused",
            "_name_": "PAUSED",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 1
          },
          "playing": "<circular_ref:PlaybackState>",
          "unknown": {
            "_value_": "unknown",
            "_name_": "UNKNOWN",
            "__objclass__": "<circular_ref:EnumType>",
            "_sort_order_": 3
          }
        },
        "_unhashable_values_": [],
        "_member_type_": {
          "__new__": "<built-in method __new__ of type object at 0x105abc1e0>",
          "__repr__": "<slot wrapper '__repr__' of 'str' objects>",
          "__hash__": "<slot wrapper '__hash__' of 'str' objects>",
          "__str__": "<slot wrapper '__str__' of 'str' objects>",
          "__lt__": "<slot wrapper '__lt__' of 'str' objects>",
          "__le__": "<slot wrapper '__le__' of 'str' objects>",
          "__eq__": "<slot wrapper '__eq__' of 'str' objects>",
          "__ne__": "<slot wrapper '__ne__' of 'str' objects>",
          "__gt__": "<slot wrapper '__gt__' of 'str' objects>",
          "__ge__": "<slot wrapper '__ge__' of 'str' objects>",
          "__iter__": "<slot wrapper '__iter__' of 'str' objects>",
          "__mod__": "<slot wrapper '__mod__' of 'str' objects>",
          "__rmod__": "<slot wrapper '__rmod__' of 'str' objects>",
          "__len__": "<slot wrapper '__len__' of 'str' objects>",
          "__getitem__": "<slot wrapper '__getitem__' of 'str' objects>",
          "__add__": "<slot wrapper '__add__' of 'str' objects>",
          "__mul__": "<slot wrapper '__mul__' of 'str' objects>",
          "__rmul__": "<slot wrapper '__rmul__' of 'str' objects>",
          "__contains__": "<slot wrapper '__contains__' of 'str' objects>",
          "encode": "<method 'encode' of 'str' objects>",
          "replace": "<method 'replace' of 'str' objects>",
          "split": "<method 'split' of 'str' objects>",
          "rsplit": "<method 'rsplit' of 'str' objects>",
          "join": "<method 'join' of 'str' objects>",
          "capitalize": "<method 'capitalize' of 'str' objects>",
          "casefold": "<method 'casefold' of 'str' objects>",
          "title": "<method 'title' of 'str' objects>",
          "center": "<method 'center' of 'str' objects>",
          "count": "<method 'count' of 'str' objects>",
          "expandtabs": "<method 'expandtabs' of 'str' objects>",
          "find": "<method 'find' of 'str' objects>",
          "partition": "<method 'partition' of 'str' objects>",
          "index": "<method 'index' of 'str' objects>",
          "ljust": "<method 'ljust' of 'str' objects>",
          "lower": "<method 'lower' of 'str' objects>",
          "lstrip": "<method 'lstrip' of 'str' objects>",
          "rfind": "<method 'rfind' of 'str' objects>",
          "rindex": "<method 'rindex' of 'str' objects>",
          "rjust": "<method 'rjust' of 'str' objects>",
          "rstrip": "<method 'rstrip' of 'str' objects>",
          "rpartition": "<method 'rpartition' of 'str' objects>",
          "splitlines": "<method 'splitlines' of 'str' objects>",
          "strip": "<method 'strip' of 'str' objects>",
          "swapcase": "<method 'swapcase' of 'str' objects>",
          "translate": "<method 'translate' of 'str' objects>",
          "upper": "<method 'upper' of 'str' objects>",
          "startswith": "<method 'startswith' of 'str' objects>",
          "endswith": "<method 'endswith' of 'str' objects>",
          "removeprefix": "<method 'removeprefix' of 'str' objects>",
          "removesuffix": "<method 'removesuffix' of 'str' objects>",
          "isascii": "<method 'isascii' of 'str' objects>",
          "islower": "<method 'islower' of 'str' objects>",
          "isupper": "<method 'isupper' of 'str' objects>",
          "istitle": "<method 'istitle' of 'str' objects>",
          "isspace": "<method 'isspace' of 'str' objects>",
          "isdecimal": "<method 'isdecimal' of 'str' objects>",
          "isdigit": "<method 'isdigit' of 'str' objects>",
          "isnumeric": "<method 'isnumeric' of 'str' objects>",
          "isalpha": "<method 'isalpha' of 'str' objects>",
          "isalnum": "<method 'isalnum' of 'str' objects>",
          "isidentifier": "<method 'isidentifier' of 'str' objects>",
          "isprintable": "<method 'isprintable' of 'str' objects>",
          "zfill": "<method 'zfill' of 'str' objects>",
          "format": "<method 'format' of 'str' objects>",
          "format_map": "<method 'format_map' of 'str' objects>",
          "__format__": "<method '__format__' of 'str' objects>",
          "maketrans": {},
          "__sizeof__": "<method '__sizeof__' of 'str' objects>",
          "__getnewargs__": "<method '__getnewargs__' of 'str' objects>",
          "__doc__": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        },
        "_value_repr_": "<slot wrapper '__repr__' of 'str' objects>",
        "IDLE": {
          "_value_": "idle",
          "_name_": "IDLE",
          "__objclass__": "<circular_ref:EnumType>",
          "_sort_order_": 0
        },
        "PAUSED": {
          "_value_": "paused",
          "_name_": "PAUSED",
          "__objclass__": "<circular_ref:EnumType>",
          "_sort_order_": 1
        },
        "PLAYING": "<circular_ref:PlaybackState>",
        "UNKNOWN": {
          "_value_": "unknown",
          "_name_": "UNKNOWN",
          "__objclass__": "<circular_ref:EnumType>",
          "_sort_order_": 3
        },
        "__str__": "<slot wrapper '__str__' of 'str' objects>",
        "__format__": "<method '__format__' of 'str' objects>",
        "__new__": {}
      },
      "_sort_order_": 2
    },
    "elapsed_time": 0.504323,
    "elapsed_time_last_updated": 1754773773.5908384,
    "powered": true,
    "volume_level": 20,
    "volume_muted": false,
    "group_members": [],
    "can_group_with": "set()",
    "synced_to": null,
    "active_source": "a8d4933d-eae2-9288-f42b-771f13c66ee9",
    "source_list": [
      {
        "id": "spotify_connect--vaHbYqWc",
        "name": "Spotify Connect",
        "passive": true,
        "can_play_pause": false,
        "can_seek": false,
        "can_next_previous": false
      }
    ],
    "active_group": null,
    "current_media": {
      "uri": "http://192.168.1.104:8097/single/Fkw5wPf7/a8d4933d-eae2-9288-f42b-771f13c66ee9/cc7e77982fe1460caba9657b176c8562.flac",
      "media_type": {
        "_value_": "track",
        "_name_": "TRACK",
        "__objclass__": {
          "_generate_next_value_": {
            "__module__": "enum",
            "__name__": "_generate_next_value_",
            "__qualname__": "StrEnum._generate_next_value_",
            "__doc__": "\n        Return the lower-cased version of the member name.\n        ",
            "__annotations__": {}
          },
          "__module__": "music_assistant_models.enums",
          "__doc__": "Enum for MediaType.",
          "_missing_": {
            "__module__": "music_assistant_models.enums",
            "__name__": "_missing_",
            "__qualname__": "MediaType._missing_",
            "__doc__": "Set default enum member if an unknown value is provided.",
            "__annotations__": {
              "value": "object",
              "return": "MediaType"
            }
          },
          "_new_member_": {},
          "_use_args_": true,
          "_member_names_": [
            "ARTIST",
            "ALBUM",
            "TRACK",
            "PLAYLIST",
            "RADIO",
            "AUDIOBOOK",
            "PODCAST",
            "PODCAST_EPISODE",
            "FOLDER",
            "ANNOUNCEMENT",
            "FLOW_STREAM",
            "PLUGIN_SOURCE",
            "UNKNOWN"
          ],
          "_member_map_": {
            "ARTIST": {
              "_value_": "artist",
              "_name_": "ARTIST",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 0
            },
            "ALBUM": {
              "_value_": "album",
              "_name_": "ALBUM",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 1
            },
            "TRACK": "<circular_ref:MediaType>",
            "PLAYLIST": {
              "_value_": "playlist",
              "_name_": "PLAYLIST",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 3
            },
            "RADIO": {
              "_value_": "radio",
              "_name_": "RADIO",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 4
            },
            "AUDIOBOOK": {
              "_value_": "audiobook",
              "_name_": "AUDIOBOOK",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 5
            },
            "PODCAST": {
              "_value_": "podcast",
              "_name_": "PODCAST",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 6
            },
            "PODCAST_EPISODE": {
              "_value_": "podcast_episode",
              "_name_": "PODCAST_EPISODE",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 7
            },
            "FOLDER": {
              "_value_": "folder",
              "_name_": "FOLDER",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 8
            },
            "ANNOUNCEMENT": {
              "_value_": "announcement",
              "_name_": "ANNOUNCEMENT",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 9
            },
            "FLOW_STREAM": {
              "_value_": "flow_stream",
              "_name_": "FLOW_STREAM",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 10
            },
            "PLUGIN_SOURCE": {
              "_value_": "plugin_source",
              "_name_": "PLUGIN_SOURCE",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 11
            },
            "UNKNOWN": {
              "_value_": "unknown",
              "_name_": "UNKNOWN",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 12
            }
          },
          "_value2member_map_": {
            "artist": {
              "_value_": "artist",
              "_name_": "ARTIST",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 0
            },
            "album": {
              "_value_": "album",
              "_name_": "ALBUM",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 1
            },
            "track": "<circular_ref:MediaType>",
            "playlist": {
              "_value_": "playlist",
              "_name_": "PLAYLIST",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 3
            },
            "radio": {
              "_value_": "radio",
              "_name_": "RADIO",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 4
            },
            "audiobook": {
              "_value_": "audiobook",
              "_name_": "AUDIOBOOK",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 5
            },
            "podcast": {
              "_value_": "podcast",
              "_name_": "PODCAST",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 6
            },
            "podcast_episode": {
              "_value_": "podcast_episode",
              "_name_": "PODCAST_EPISODE",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 7
            },
            "folder": {
              "_value_": "folder",
              "_name_": "FOLDER",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 8
            },
            "announcement": {
              "_value_": "announcement",
              "_name_": "ANNOUNCEMENT",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 9
            },
            "flow_stream": {
              "_value_": "flow_stream",
              "_name_": "FLOW_STREAM",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 10
            },
            "plugin_source": {
              "_value_": "plugin_source",
              "_name_": "PLUGIN_SOURCE",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 11
            },
            "unknown": {
              "_value_": "unknown",
              "_name_": "UNKNOWN",
              "__objclass__": "<circular_ref:MediaTypeMeta>",
              "_sort_order_": 12
            }
          },
          "_unhashable_values_": [],
          "_member_type_": {
            "__new__": "<built-in method __new__ of type object at 0x105abc1e0>",
            "__repr__": "<slot wrapper '__repr__' of 'str' objects>",
            "__hash__": "<slot wrapper '__hash__' of 'str' objects>",
            "__str__": "<slot wrapper '__str__' of 'str' objects>",
            "__lt__": "<slot wrapper '__lt__' of 'str' objects>",
            "__le__": "<slot wrapper '__le__' of 'str' objects>",
            "__eq__": "<slot wrapper '__eq__' of 'str' objects>",
            "__ne__": "<slot wrapper '__ne__' of 'str' objects>",
            "__gt__": "<slot wrapper '__gt__' of 'str' objects>",
            "__ge__": "<slot wrapper '__ge__' of 'str' objects>",
            "__iter__": "<slot wrapper '__iter__' of 'str' objects>",
            "__mod__": "<slot wrapper '__mod__' of 'str' objects>",
            "__rmod__": "<slot wrapper '__rmod__' of 'str' objects>",
            "__len__": "<slot wrapper '__len__' of 'str' objects>",
            "__getitem__": "<slot wrapper '__getitem__' of 'str' objects>",
            "__add__": "<slot wrapper '__add__' of 'str' objects>",
            "__mul__": "<slot wrapper '__mul__' of 'str' objects>",
            "__rmul__": "<slot wrapper '__rmul__' of 'str' objects>",
            "__contains__": "<slot wrapper '__contains__' of 'str' objects>",
            "encode": "<method 'encode' of 'str' objects>",
            "replace": "<method 'replace' of 'str' objects>",
            "split": "<method 'split' of 'str' objects>",
            "rsplit": "<method 'rsplit' of 'str' objects>",
            "join": "<method 'join' of 'str' objects>",
            "capitalize": "<method 'capitalize' of 'str' objects>",
            "casefold": "<method 'casefold' of 'str' objects>",
            "title": "<method 'title' of 'str' objects>",
            "center": "<method 'center' of 'str' objects>",
            "count": "<method 'count' of 'str' objects>",
            "expandtabs": "<method 'expandtabs' of 'str' objects>",
            "find": "<method 'find' of 'str' objects>",
            "partition": "<method 'partition' of 'str' objects>",
            "index": "<method 'index' of 'str' objects>",
            "ljust": "<method 'ljust' of 'str' objects>",
            "lower": "<method 'lower' of 'str' objects>",
            "lstrip": "<method 'lstrip' of 'str' objects>",
            "rfind": "<method 'rfind' of 'str' objects>",
            "rindex": "<method 'rindex' of 'str' objects>",
            "rjust": "<method 'rjust' of 'str' objects>",
            "rstrip": "<method 'rstrip' of 'str' objects>",
            "rpartition": "<method 'rpartition' of 'str' objects>",
            "splitlines": "<method 'splitlines' of 'str' objects>",
            "strip": "<method 'strip' of 'str' objects>",
            "swapcase": "<method 'swapcase' of 'str' objects>",
            "translate": "<method 'translate' of 'str' objects>",
            "upper": "<method 'upper' of 'str' objects>",
            "startswith": "<method 'startswith' of 'str' objects>",
            "endswith": "<method 'endswith' of 'str' objects>",
            "removeprefix": "<method 'removeprefix' of 'str' objects>",
            "removesuffix": "<method 'removesuffix' of 'str' objects>",
            "isascii": "<method 'isascii' of 'str' objects>",
            "islower": "<method 'islower' of 'str' objects>",
            "isupper": "<method 'isupper' of 'str' objects>",
            "istitle": "<method 'istitle' of 'str' objects>",
            "isspace": "<method 'isspace' of 'str' objects>",
            "isdecimal": "<method 'isdecimal' of 'str' objects>",
            "isdigit": "<method 'isdigit' of 'str' objects>",
            "isnumeric": "<method 'isnumeric' of 'str' objects>",
            "isalpha": "<method 'isalpha' of 'str' objects>",
            "isalnum": "<method 'isalnum' of 'str' objects>",
            "isidentifier": "<method 'isidentifier' of 'str' objects>",
            "isprintable": "<method 'isprintable' of 'str' objects>",
            "zfill": "<method 'zfill' of 'str' objects>",
            "format": "<method 'format' of 'str' objects>",
            "format_map": "<method 'format_map' of 'str' objects>",
            "__format__": "<method '__format__' of 'str' objects>",
            "maketrans": {},
            "__sizeof__": "<method '__sizeof__' of 'str' objects>",
            "__getnewargs__": "<method '__getnewargs__' of 'str' objects>",
            "__doc__": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
          },
          "_value_repr_": "<slot wrapper '__repr__' of 'str' objects>",
          "ARTIST": {
            "_value_": "artist",
            "_name_": "ARTIST",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 0
          },
          "ALBUM": {
            "_value_": "album",
            "_name_": "ALBUM",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 1
          },
          "TRACK": "<circular_ref:MediaType>",
          "PLAYLIST": {
            "_value_": "playlist",
            "_name_": "PLAYLIST",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 3
          },
          "RADIO": {
            "_value_": "radio",
            "_name_": "RADIO",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 4
          },
          "AUDIOBOOK": {
            "_value_": "audiobook",
            "_name_": "AUDIOBOOK",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 5
          },
          "PODCAST": {
            "_value_": "podcast",
            "_name_": "PODCAST",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 6
          },
          "PODCAST_EPISODE": {
            "_value_": "podcast_episode",
            "_name_": "PODCAST_EPISODE",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 7
          },
          "FOLDER": {
            "_value_": "folder",
            "_name_": "FOLDER",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 8
          },
          "ANNOUNCEMENT": {
            "_value_": "announcement",
            "_name_": "ANNOUNCEMENT",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 9
          },
          "FLOW_STREAM": {
            "_value_": "flow_stream",
            "_name_": "FLOW_STREAM",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 10
          },
          "PLUGIN_SOURCE": {
            "_value_": "plugin_source",
            "_name_": "PLUGIN_SOURCE",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 11
          },
          "UNKNOWN": {
            "_value_": "unknown",
            "_name_": "UNKNOWN",
            "__objclass__": "<circular_ref:MediaTypeMeta>",
            "_sort_order_": 12
          },
          "__str__": "<slot wrapper '__str__' of 'str' objects>",
          "__format__": "<method '__format__' of 'str' objects>",
          "__new__": {}
        },
        "_sort_order_": 2
      },
      "title": "Lonesome Pine",
      "artist": "Carbon Leaf",
      "album": "Echo Echo",
      "image_url": "http://192.168.1.104:8097/imageproxy?provider=plex--qpZJzhqJ&size=512&fmt=png&path=%252Flibrary%252Fmetadata%252F27377%252Fthumb%252F1710317358",
      "duration": null,
      "queue_id": null,
      "queue_item_id": null,
      "custom_data": null
    },
    "enabled": true,
    "hide_player_in_ui": "{<HidePlayerOption.WHEN_UNAVAILABLE: 'when_unavailable'>, <HidePlayerOption.WHEN_SYNCED: 'when_synced'>, <HidePlayerOption.WHEN_GROUP_ACTIVE: 'when_group_active'>}",
    "expose_to_ha": true,
    "icon": "mdi-speaker",
    "group_volume": 20,
    "extra_attributes": {},
    "power_control": "native",
    "volume_control": "native",
    "mute_control": "native"
  },
  "processed_state": {
    "state": "playing",
    "powered": true,
    "volume_level": 20,
    "volume_muted": false,
    "current_track": "Carbon Leaf - Lonesome Pine",
    "player_name": "Office Speaker"
  }
}